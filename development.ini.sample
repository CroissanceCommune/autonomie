[app:autonomie]
use = egg:autonomie

pyramid.reload_templates = true
pyramid.reload_assets = true
pyramid.reload_all = true
pyramid.debug_authorization = false
pyramid.debug_notfound = true
pyramid.debug_routematch = false
pyramid.debug_templates = true
pyramid.default_locale_name = fr_FR
pyramid.includes =
                    autonomie_celery
                    pyramid_tm
                    pyramid_services
                    pyramid_mailer.debug
                    pyramid_layout
                    pyramid_mako
                    pyramid_chameleon
                    pyramid_celery
                    js.deform
                    deform_extensions
                    pyramid_methodrewrite

####  MAIL FROM WITHIN THE APPLICATION ####
# Add this one to pyramid.includes if you configured a mailbox
#pyramid_mailer

# Mail configuration
# Host and port are set to localhost/25 by default
#mail.host = smtp.gmail.com
#mail.port=587
#mail.username=mygmailaccount@gmail.com
#mail.password=mygmailpasswd
#mail.tls=True
#mail.default_sender=default_sender@sender.com
### Optout address for unsubscription (for local smtp purpose)
#mail.optout_address=unsubcribe@mail.com
## Bounce_url address (should indicate a server redirecting a query to the url passed in the url GET param)
#mail.bounce_url=bounce_server.com

#### DATABASE ACCESS CONFIGURATION ####
sqlalchemy.url = mysql://autonomie:autonomie@localhost/autonomie?charset=utf8
sqlalchemy.echo=False
#sqlalchemy.encoding=UTF8
# Those variables should be improved to fit your configuration
sqlalchemy.pool_recycle=7200
sqlalchemy.pool_size=100

#### MAKO SPECIFIC CONFIGURATION ####
mako.directories = autonomie:templates
mako.imports = from markupsafe import escape_silent
mako.default_filters = escape_silent
mako.module_directory = %(here)s/mako_compiled_templates

#### BEAKER SESSION AND CACHE CONFIGURATION ####
session.type=file
session.data_dir = %(here)s/data/sessions/data
session.lock_dir = %(here)s/data/sessions/lock
session.cookie_on_exception = true
#session.auto=True
session.secret=mysecretpassphraseforsessionencoding
session.timeout=3600
session.longtimeout=64000
cache.data_dir = %(here)s/data/cache/data
cache.regions = default_term, second, short_term, long_term
cache.type = file
cache.second.expire = 1
cache.short_term.expire = 60
cache.default_term.expire = 300
cache.long_term.expire = 20

# static file path (may be an url, allowing to have static datas on different servers)
autonomie.static=static
# Assets (logo ...) storage path
autonomie.assets=/tmp/
# Temp dir for compiled files (like pdf generation or large export files),
# is accessible as a static directory
autonomie.static_tmp=autonomie:tmp
# treasury related docs upload
autonomie.ftpdir=%(here)s/tmp/filesystem
# Max filesize for file attachment (in Bytes)
autonomie.maxfilesize=2000000
# The instance name
autonomie.instance_name=intranet.local.fr
# The depot path for storing files locally
autonomie.depot_path = %(here)s/tmp/filedepot
# Tempdir for file upload (should exist)
pyramid_deform.tempdir= %(here)s/tmp/tempdir
# Pyramid services configuration (allow to override default behaviour for some
# interfaces)
# autonomie.services.treasury_invoice_writer=mypackage.InvoiceWriter
# autonomie.services.treasury_invoice_producer=mypackage.InvoiceProducer
#autonomie.services.treasury_expense_writer=mypackage.ExpenseWriter
#autonomie.services.treasury_expense_producer=mypackage.ExpenseProducer
#autonomie.services.treasury_payment_writer=mypackage.PaymentWriter
#autonomie.services.treasury_payment_producer=mypackage.PaymentProducer

[celery]
BROKER_URL = redis://localhost:6379/0
CELERY_IMPORTS =
    autonomie_celery.tasks.export
    autonomie_celery.schedulers

CELERY_TASK_SERIALIZER = json
#CELERYD_HIJACK_ROOT_LOGGER = False
CELERY_ACCEPT_CONTENT= json
                       yaml

[filter:fanstatic]
use = egg:fanstatic#fanstatic
bundle=False
minified=False
bottom=True

[pipeline:main]
pipeline =
    fanstatic
    autonomie

[server:main]
use = egg:waitress#main
host = 0.0.0.0
port = 8080

[pshell]
models = autonomie.models
db=autonomie_base.models.base.DBSESSION
transaction=transaction
default_shell = ipython


# Begin logging configuration
[loggers]
keys = root, sqlalchemy, alembic, celery

[handlers]
keys = console, file, sqlfile, celery_file

[formatters]
keys = generic, sqlfile

[logger_root]
level = DEBUG
handlers = file, console
propagate=1

[logger_autonomie]
level = DEBUG
handlers = file, console, warnfile
qualname = autonomie
propagate=0

[logger_sqlalchemy]
level = WARN
handlers = file, sqlfile
qualname = sqlalchemy.engine
propagate=0
# level = INFO logs SQL queries.
# level = DEBUG logs SQL queries and results.
# level = WARN logs neither. (Recommended for production systems.)

[logger_celery]
level=DEBUG
handlers = celery_file, console
propagate=0
qualname = autonomie.celery

[logger_alembic]
level = DEBUG
handlers = sqlfile
qualname = alembic

[handler_console]
class = autonomie.log.CustomStreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[handler_file]
class = autonomie.log.CustomFileHandler
args = ('logfile.log','a')
level = DEBUG
formatter = generic

[handler_celery_file]
class = autonomie.log.CustomFileHandler
args = ('celery.log','a')
level = DEBUG
formatter = generic

[handler_warnfile]
class = autonomie.log.CustomFileHandler
args = ('warnlogfile.log','a')
level = WARN
formatter = generic


[handler_sqlfile]
class = FileHandler
args = ('sql.log','a')
level = DEBUG
formatter = sqlfile

[formatter_sqlfile]
format = %(message)s

[formatter_generic]
format = %(ip)s - %(asctime)-15s %(levelname)-5.5s %(message)s ([%(name)s.%(funcName)s:%(lineno)d])
# End logging configuration
#Alembic conf
[alembic]
script_location = autonomie:alembic
file_template = %%(slug)s_%%(rev)s
